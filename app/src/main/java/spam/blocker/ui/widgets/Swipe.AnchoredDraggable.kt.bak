@file:OptIn(ExperimentalMaterial3Api::class)

package spam.blocker.ui.widgets

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeOut
import androidx.compose.animation.shrinkHorizontally
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.AnchoredDraggableState
import androidx.compose.foundation.gestures.DraggableAnchors
import androidx.compose.foundation.gestures.Orientation
import androidx.compose.foundation.gestures.anchoredDraggable
import androidx.compose.foundation.gestures.animateTo
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.SwipeToDismissBoxState
import androidx.compose.material3.SwipeToDismissBoxValue
import androidx.compose.material3.SwipeToDismissBoxValue.EndToStart
import androidx.compose.material3.SwipeToDismissBoxValue.StartToEnd
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.SideEffect
import androidx.compose.runtime.derivedStateOf
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.runtime.snapshotFlow
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.onSizeChanged
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.unit.IntOffset
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import spam.blocker.R
import spam.blocker.ui.M
import spam.blocker.ui.theme.MayaBlue
import spam.blocker.ui.theme.Salmon
import spam.blocker.util.Lambda
import spam.blocker.util.logi
import kotlin.math.roundToInt

private const val SwipeThresholdPercent = 0.35f

private const val AnimationDuration = 200

typealias SwipeDir = SwipeToDismissBoxValue

val SwipeToDismissBoxState.dir: SwipeDir
    get() = this.dismissDirection

data class SwipeInfo(
    val onSwipe: Lambda,

    // When it gets swiped and triggers the onSwipe, whether to veto the swiping state or not.
    // It's used for history record, when right swiped, it opens the conversation in the
    //   system call/sms app without removing the record from UI.
    val veto: Boolean = false,

    val background: (@Composable (AnchoredDraggableState<DragState>) -> Unit)? = null
)

enum class DragState { OpenLeft, Closed, OpenRight }

enum class SwipeDirection { Left, Right, None }


// Wrap a @Composable to make it swipeable in both directions.
@Composable
fun SwipeWrapper(
    left: SwipeInfo? = null,
    right: SwipeInfo? = null,
    content: @Composable () -> Unit,
) {
    val density = LocalDensity.current

    val openOffsetPx = with(density) { 120.dp.toPx() }

    val anchors = remember(density) {
        DraggableAnchors {
            DragState.Closed at 0f

            if (left != null)
                DragState.OpenLeft at -openOffsetPx

            if (right != null)
                DragState.OpenRight at openOffsetPx
        }
    }

    val state = remember {
        AnchoredDraggableState(
            initialValue = DragState.Closed,
            anchors = anchors,
        )
    }



    SideEffect {
        state.updateAnchors(anchors)
    }


//    var state = rememberSwipeToDismissBoxState(
//        positionalThreshold = {
//            it * SwipeThresholdPercent
//        },
//        confirmValueChange = { dir ->
//            triggeredDir = dir
//
//            when (dir) {
//                EndToStart -> {
//                    left?.onSwipe?.invoke()
//
//                    left?.veto != true
//                }
//
//                StartToEnd -> {
//                    right?.onSwipe?.invoke()
//                    right?.veto != true
//                }
//
//                else -> false
//            }
//        }
//    )

    LaunchedEffect(state) {
        snapshotFlow { state.settledValue }
            .collectLatest {
                if (it == DragState.OpenLeft) {
                    left!!.onSwipe()
                    if (left.veto)
                        state.animateTo(DragState.Closed)
                }
                if (it == DragState.OpenRight) {
                    right!!.onSwipe()
                    if (right.veto)
                        state.animateTo(DragState.Closed)
                }
            }
    }

    // Track the height of the rule card, adjust the background to have the same height as the foreground card.
    var cardHeight by remember { mutableIntStateOf(0) }

    Box {
        Row(modifier = M
            .fillMaxSize()
            .clip(RoundedCornerShape(6.dp))
            .height(cardHeight.dp)
        ) {
            RowVCenter(modifier = M.weight(1f)) {
                right?.background?.let { it(state) }
            }
            RowVCenter(modifier = M.weight(1f)) {
                left?.background?.let { it(state) }
            }
        }

        val density = LocalDensity.current
        Box(
            modifier = Modifier
                // Synchronize the background height with this
                .onSizeChanged{ size->
                    cardHeight =  (size.height / density.density).roundToInt()
                }
                .anchoredDraggable(state, Orientation.Horizontal)
                .offset {
                    IntOffset(
                        x = state.requireOffset().roundToInt(),
                        y = 0
                    )
                },
        ) {
            content()
        }
    }
}

// Wraps `content` with animation
@Composable
fun LeftDeleteSwipeWrapper(
    left: SwipeInfo? = null,
    right: SwipeInfo? = null,
    content: @Composable () -> Unit,
) {
//    var isDeleted by remember { mutableStateOf(false) }
//
//    val scope = rememberCoroutineScope()

    SwipeWrapper(
        left = left?.copy(
            onSwipe = {
//                isDeleted = true
//                scope.launch {
//                    delay(AnimationDuration.toLong())
                    left.onSwipe()
//                }
            },
            background = left.background ?: { state -> BgDelete(state, EndToStart) }
        ),
        right = right,
        content = {
//            if (!isDeleted) {
//            AnimatedVisibility(
//                visible = !isDeleted,
//                exit = shrinkHorizontally(
//                    animationSpec = tween(durationMillis = AnimationDuration),
//                    shrinkTowards = Alignment.Start
//                ) + fadeOut()
//            ) {
                content()
//            }
        }
    )
}


// Red background with a "recycler bin" icon.
@Composable
fun BgDelete(
    state: AnchoredDraggableState<DragState>,
    direction: SwipeToDismissBoxValue = EndToStart,
) {
    val color = Salmon
//        if (state.dismissDirection == direction) {
//        Salmon.copy(
//            alpha = if (state.progress >= SwipeThresholdPercent)
//                1.0f
//            else
//                (state.progress / SwipeThresholdPercent) * 0.7f
//        )
//    } else Color.Transparent

    Box(
        modifier = Modifier
            .fillMaxSize()
            .clip(RoundedCornerShape(6.dp))
            .background(color)
            .padding(horizontal = 16.dp),
        contentAlignment = if (direction == StartToEnd) {
            Alignment.CenterStart
        } else {
            Alignment.CenterEnd
        }
    ) {
        ResIcon(
            iconId = R.drawable.ic_recycle_bin,
            color = Color.White
        )
    }
}

// Red background with a "Exit" icon.
@Composable
fun BgLaunchApp(
    state: AnchoredDraggableState<DragState>,
    direction: SwipeToDismissBoxValue = StartToEnd,
) {
    val color = MayaBlue
//    if (state.dismissDirection == direction) {
//        MayaBlue.copy(
//            alpha = if (state.progress >= SwipeThresholdPercent)
//                1.0f
//            else
//                (state.progress / SwipeThresholdPercent) * 0.7f
//        )
//    } else Color.Transparent

    Box(
        modifier = Modifier
            .fillMaxSize()
            .clip(RoundedCornerShape(6.dp))
            .background(color)
            .padding(horizontal = 16.dp),
        contentAlignment = if (direction == StartToEnd) {
            Alignment.CenterStart
        } else {
            Alignment.CenterEnd
        }
    ) {
        ResIcon(
            iconId = R.drawable.ic_exit,
            color = Color.White,
        )
    }
}

